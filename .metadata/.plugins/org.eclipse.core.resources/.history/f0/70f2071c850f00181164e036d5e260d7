/*
 * EID's of group members
 * 
 */
import java.util.concurrent.Semaphore; // for implementation using Semaphores

public class ThreadSynch {
	private int parties;
	private Semaphore sem;
	private Semaphore lock;
	private int numWaiting;
	public ThreadSynch(int parties) {
		this.parties = parties;
		this.sem = new Semaphore(parties);
		this.lock = new Semaphore(1);
		this.numWaiting = 0;
//		try {
////			sem.acquire();
//		} catch (InterruptedException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
//		
		
	}
	
	public int await() throws InterruptedException {
		// Waits until all parties have invoked await on this ThreadSynch.
		// If the current thread is not the last to arrive then it is
		// disabled for thread scheduling purposes and lies dormant until the last thread arrives.
		// Returns: the arrival index of the current thread, where index
		// (parties - 1) indicates the first to arrive and zero indicates
		// the last to arrive.
		
           int index = 0;
   
          // you need to write this code
	    return index;
	}
}