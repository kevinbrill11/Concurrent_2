/*
 * EID's of group members
 * 
 */
import java.util.concurrent.Semaphore; // for implementation using Semaphores

public class ThreadSynch {
	private int parties;
	private Semaphore sem;
	private Semaphore lock;
	private int numWaiting;
	
	private Semaphore nextSem;
	private int nextWaiting;
	
	public ThreadSynch(int parties) {
		this.parties = parties;
		
		sem = new Semaphore(parties);
		nextSem = new Semaphore(parties);
		lock = new Semaphore(1);
		
		numWaiting = 0;
		nextWaiting = 0;
		
		try {
			//immediately acquire semaphore to block on
			nextSem.acquire();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	public int await() throws InterruptedException {
		// Waits until all parties have invoked await on this ThreadSynch.
		// If the current thread is not the last to arrive then it is
		// disabled for thread scheduling purposes and lies dormant until the last thread arrives.
		// Returns: the arrival index of the current thread, where index
		// (parties - 1) indicates the first to arrive and zero indicates
		// the last to arrive.
		
           int index = 0;
           sem.acquire();
           lock.acquire();
           numWaiting ++;
   		   index = parties - numWaiting;
           lock.release();

           //check if enough people are waiting, if so release the initial sem
           if(numWaiting >= parties){
        	   nextSem.release(parties);
        	   
           }
           
           //reacquire nextSem for the next round
           nextSem.acquire();
           lock.acquire();
           nextWaiting++;
           
           //if the next set done waiting, reset variables and grab new semaphores
           if(nextWaiting ==parties){
        	sem.release(parties);
   			nextWaiting=0;
   			numWaiting=0;
   			nextSem.acquire(parties);
           }
           
          lock.release();
          // you need to write this code
	    return index;
	}
}